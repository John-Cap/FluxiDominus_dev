
{"9d84f9a9-8665-4883-a506-4aa07cee48ab":{"name":"Flowsyn Maxi 2","flowsInto":["7b51af7b-ccec-4a47-a13c-ba16eb65b973"],"deviceName":"flowsynmaxi1","deviceType":"FlowsynMaxi","volume":5},"6892d932-90df-447b-b1f8-77020f8ef4f5":{"name":"R4 (Peristaltic)","flowsInto":["7b51af7b-ccec-4a47-a13c-ba16eb65b973"],"deviceName":"vapourtecR4P1700","deviceType":"vapourtecR4","volume":5},"07e4e67d-88a5-486b-9919-83f41aadb926":{"name":"Valve","flowsInto":["6892d932-90df-447b-b1f8-77020f8ef4f5"],"deviceName":"null","deviceType":"Valve","volume":0.25},"86f76937-a5a4-4821-947c-f3686d0593f8":{"name":"Push","flowsInto":["07e4e67d-88a5-486b-9919-83f41aadb926"],"deviceName":"null","deviceType":"FlowOrigin","volume":0},"2a3dbe75-f252-4d84-a5bd-46abdac44883":{"name":"Stock","flowsInto":["07e4e67d-88a5-486b-9919-83f41aadb926"],"deviceName":"null","deviceType":"FlowOrigin","volume":0},"701867bb-daa6-48e6-94b4-c52a11eb6626":{"name":"Stock","flowsInto":["9d84f9a9-8665-4883-a506-4aa07cee48ab"],"deviceName":"null","deviceType":"FlowOrigin","volume":0},"7b51af7b-ccec-4a47-a13c-ba16eb65b973":{"name":"Hotcoil (10 mL)","flowsInto":["1b28500a-8bf6-4c89-8e09-2416f3e1cc5a"],"deviceName":"hotcoil1","deviceType":"Coil","volume":10},"1b28500a-8bf6-4c89-8e09-2416f3e1cc5a":{"name":"ReactIR 702L1","flowsInto":["96f1d6fd-1304-4e72-a124-8c31dd082e57"],"deviceName":"reactIR702L1","deviceType":"IR","volume":0.25},"96f1d6fd-1304-4e72-a124-8c31dd082e57":{"name":"BPR (8 Bar)","flowsInto":["d2222e10-c5e6-4cd7-add6-21da90dd72ae"],"deviceName":"null","deviceType":"BPR","volume":0.1},"d2222e10-c5e6-4cd7-add6-21da90dd72ae":{"name":"Valve","flowsInto":["51dfd5fe-fa37-4dd3-8b26-a3ccb63a8a6f","242b2435-c911-42d0-bfaf-a2e34d554edf"],"deviceName":"null","deviceType":"Valve","volume":0.25},"242b2435-c911-42d0-bfaf-a2e34d554edf":{"name":"Collection point","flowsInto":null,"deviceName":"null","deviceType":"FlowTerminus","volume":0},"51dfd5fe-fa37-4dd3-8b26-a3ccb63a8a6f":{"name":"Collection point","flowsInto":null,"deviceName":"null","deviceType":"FlowTerminus","volume":0}}


A json describing connections between components is received via MQTT:

jsonStringFromFlutter="""
{
  "9d84f9a9-8665-4883-a506-4aa07cee48ab": {
    "name": "Flowsyn Maxi 2",
    "flowsInto": [
      "7b51af7b-ccec-4a47-a13c-ba16eb65b973"
    ],
    "deviceName": "flowsynmaxi1",
    "deviceType": "FlowsynMaxi",
    "volume": 5
  },
  "6892d932-90df-447b-b1f8-77020f8ef4f5": {
    "name": "R4 (Peristaltic)",
    "flowsInto": [
      "7b51af7b-ccec-4a47-a13c-ba16eb65b973"
    ],
    "deviceName": "vapourtecR4P1700",
    "deviceType": "vapourtecR4",
    "volume": 5
  },
  "07e4e67d-88a5-486b-9919-83f41aadb926": {
    "name": "Valve",
    "flowsInto": [
      "6892d932-90df-447b-b1f8-77020f8ef4f5"
    ],
    "deviceName": "null",
    "deviceType": "Valve",
    "volume": 0.25
  },
  "86f76937-a5a4-4821-947c-f3686d0593f8": {
    "name": "Push",
    "flowsInto": [
      "07e4e67d-88a5-486b-9919-83f41aadb926"
    ],
    "deviceName": "null",
    "deviceType": "FlowOrigin",
    "volume": 0
  },
  "2a3dbe75-f252-4d84-a5bd-46abdac44883": {
    "name": "Stock",
    "flowsInto": [
      "07e4e67d-88a5-486b-9919-83f41aadb926"
    ],
    "deviceName": "null",
    "deviceType": "FlowOrigin",
    "volume": 0
  },
  "701867bb-daa6-48e6-94b4-c52a11eb6626": {
    "name": "Stock",
    "flowsInto": [
      "9d84f9a9-8665-4883-a506-4aa07cee48ab"
    ],
    "deviceName": "null",
    "deviceType": "FlowOrigin",
    "volume": 0
  },
  "7b51af7b-ccec-4a47-a13c-ba16eb65b973": {
    "name": "Hotcoil (10 mL)",
    "flowsInto": [
      "1b28500a-8bf6-4c89-8e09-2416f3e1cc5a"
    ],
    "deviceName": "hotcoil1",
    "deviceType": "Coil",
    "volume": 10
  },
  "1b28500a-8bf6-4c89-8e09-2416f3e1cc5a": {
    "name": "ReactIR 702L1",
    "flowsInto": [
      "96f1d6fd-1304-4e72-a124-8c31dd082e57"
    ],
    "deviceName": "reactIR702L1",
    "deviceType": "IR",
    "volume": 0.25
  },
  "96f1d6fd-1304-4e72-a124-8c31dd082e57": {
    "name": "BPR (8 Bar)",
    "flowsInto": [
      "d2222e10-c5e6-4cd7-add6-21da90dd72ae"
    ],
    "deviceName": "null",
    "deviceType": "BPR",
    "volume": 0.1
  },
  "d2222e10-c5e6-4cd7-add6-21da90dd72ae": {
    "name": "Valve",
    "flowsInto": [
      "51dfd5fe-fa37-4dd3-8b26-a3ccb63a8a6f",
      "242b2435-c911-42d0-bfaf-a2e34d554edf"
    ],
    "deviceName": "null",
    "deviceType": "Valve",
    "volume": 0.25
  },
  "242b2435-c911-42d0-bfaf-a2e34d554edf": {
    "name": "Collection point",
    "flowsInto": null,
    "deviceName": "null",
    "deviceType": "FlowTerminus",
    "volume": 0
  },
  "51dfd5fe-fa37-4dd3-8b26-a3ccb63a8a6f": {
    "name": "Collection point",
    "flowsInto": null,
    "deviceName": "null",
    "deviceType": "FlowTerminus",
    "volume": 0
  }
}
"""
'deviceType' refers to the component class to be instantiate from StandardConfigurationDevices:

class StandardConfiguratedDevices:
    deviceClasses={
        "FlowsynMaxi":FlowsynMaxi,
        "VapourtecR4":VapourtecR4,
        "ReactIR702L1":ReactIR702L1,
        "UniqsisHotcoil":UniqsisHotcoil,
        "UniqsisHotchip":UniqsisHotchip,
        
        #Generalized
        "Tubing":Tubing,
        "TPiece":TPiece,
        "Coil":Coil,
        "Valve":Valve,
        "FlowOrigin":FlowOrigin,
        "FlowTerminus":FlowTerminus,
        "IR":IR,
        "Chip":Chip,
        "Pump":Pump
    }

    @staticmethod
    def initializeComponent(component,params):
        return (StandardConfiguratedDevices.deviceClasses[component](params))

This info must be taken and the flow path be set up similarily to unrelated example below:

if __name__ == "__main__":
    #instantiate flowpath
    _path=FlowPath()
    comp=[]
    
    #Instantiate individual components:
    #Stocks

    _redStock=FlowOrigin( #Class to be instantiated, 'deviceType' key, fetched from StandardConfiguratedDevices.initializeComponent(deviceType,params).
        volume=0, #'volume' key
        name="RED_STOCK" #'name' key
    )
    comp.append(_redStock)

    _blueStock=FlowOrigin(volume=0,name="BLUE_STOCK")
    comp.append(_blueStock)
    _pinkStock=FlowOrigin(volume=0,name="PINK_STOCK")
    comp.append(_pinkStock)
    _purpleStock=FlowOrigin(volume=0,name="PURPLE_STOCK")
    #comp.append(_purpleStock)
    
    #Pump lines
    _pump_1=Pump(volume=1.5,name="PUMP_1")
    comp.append(_pump_1)
    _pump_2=Pump(volume=1.5,name="PUMP_2")
    comp.append(_pump_2)
    _pump_3=Pump(volume=1.5,name="PUMP_3")
    comp.append(_pump_3)
    _pump_4=Pump(volume=1.5,name="PUMP_4")
    #comp.append(_pump_4)
    #Valves
    _3wayValve=Valve(volume=0.05)
    _cwValve=Valve(volume=0.05,name="CW_VALVE")
    comp.append(_cwValve)
    _valve_1=Valve(volume=0.05,name="DIVERT_VALVE")
    comp.append(_valve_1)
    _flushCoilValve=Valve(volume=0.05,name="FLUSH_VALVE")
    comp.append(_flushCoilValve)
    #IR
    _IR=(IR(volume=0.5,name="IR"))
    comp.append(_IR)
    #Coil
    _coil=(Coil(volume=5,name="COIL"))
    comp.append(_coil)
    #Termini
    _waste=FlowTerminus(volume=0,name="WASTE")
    comp.append(_waste)
    _collect=FlowTerminus(volume=0,name="COLLECT")
    comp.append(_collect)
    _terminus_3=FlowTerminus(volume=0,name="TERMINUS_3")
    comp.append(_terminus_3)
    _terminus_4=FlowTerminus(volume=0,name="TERMINUS_4")
    comp.append(_terminus_4)
    
    _tPiece_1=TPiece(volume=0.05,name="TPIECE_1")
    comp.append(_tPiece_1)
    _tPiece_2=TPiece(volume=0.05,name="TPIECE_2")
    comp.append(_tPiece_2)
    
    _tubing_1=Tubing(volume=0.5,name="TUBE_1")
    comp.append(_tubing_1)
    _tubing_2=Tubing(volume=1,name="TUBE_2")
    comp.append(_tubing_2)
    _tubing_3=Tubing(volume=0.5,name="TUBE_3")
    comp.append(_tubing_3)
    _tubing_4=Tubing(volume=1,name="TUBE_4")
    comp.append(_tubing_4)
    ###################
    #Connect components

    #The connections are described in the JSON. Each main key (UUID) denotes a component, and its "flowsInto" key describes which of the other
    #components it flows into:

    #Stock solutions
    _redStock.flowInto(_pump_1)
    _blueStock.flowInto(_pump_2)
    _pinkStock.flowInto(_pump_3)
    #Pumplines 1/2
    _pump_1.flowInto(_tPiece_1)
    _pump_2.flowInto(_tPiece_1)
    #Divert valve
    _tPiece_1.flowInto(_tubing_1)
    _tubing_1.flowInto(_valve_1)
    _valve_1.flowInto(_coil)
    _valve_1.flowInto(_tubing_2)
    #Flush coil valve
    _tubing_2.flowInto(_flushCoilValve)
    _flushCoilValve.flowInto(_terminus_3)
    _flushCoilValve.flowInto(_terminus_4)
    #Coil
    _coil.flowInto(_tPiece_2)
    _pump_3.flowInto(_tPiece_2)
    _tPiece_2.flowInto(_tubing_3)
    _tubing_3.flowInto(_IR)
    _IR.flowInto(_tubing_4)
    _tubing_4.flowInto(_cwValve)
    _cwValve.flowInto(_waste)
    _cwValve.flowInto(_collect)
    #select one of the termini
    '''
    #Create path
    '''
    _path.addPath(comp)

    #Now the paths are mapped
    _path.mapPathTermini()
    adrses=[str(key) for key in _path.addressesAll.keys()]
    
    print("*********************Segment details*********************")
    for _x in _path.segments:
        print(f"Comp name: {_x.name}")
        print(f" Inlet sets: {_x.inletSets}")
        print(f" Outlet sets: {_x.outletSets}")
        print(f" Curr inlets: {_x.inlets}")   
        print(f" Curr outlets: {_x.outlets}")
        print("--")
        
    print("************************Addresses*************************")
    for _x, _y in _path.addressesAll.items():
        print(f"Address for {_x}:")
        for x in _y:
            print(f" Comp: {x[0].name}")
            print(f"  Inlet set: UNDEFINED")
            print(f"  Outlet set: {x[1]}")
        print("--")

    #Some example things:
    flowRates=[0,1.3,2.6,3.75,4.13]
    dispVol=[1,2,3,4,5]
    
    # Flag variable to indicate whether the thread should continue running?
    running=True
    allSlugs=Slugs()
    def run_code():
        global running
        global allSlugs
        global _path
        _i=0
        while running:
            '''
            _flow_1=eval(input("Pump 1 flowrate: "))
            _flow_2=eval(input("Pump 2 flowrate: "))
            _flow_3=eval(input("Pump 3 flowrate: "))
            _slugVol=eval(input("Vol to dispense: "))
            '''
            _flow_1=random.choice(flowRates)
            _flow_2=random.choice(flowRates)
            _flow_3=random.choice(flowRates)
            _slugVol=random.choice(dispVol)
            
            _redStock.setFlowrate(_flow_1/60)
            _blueStock.setFlowrate(_flow_2/60)
            _pinkStock.setFlowrate(_flow_3/60)

            _path.updateFlowrates()

            _path.setCurrDestination(random.choice(adrses))
            _slug=_path.currRelOrigin.dispense(_slugVol)
            allSlugs.slugs.append(_slug)

            _now=time.perf_counter()
            _nowRefresh=_now
            _jiggleFlowrate=time.perf_counter() + 5
            #_path.timePrev=time.perf_counter()
            while not (isinstance(_slug.tailHost,FlowTerminus)):
                if time.time() - _jiggleFlowrate > 30:
                    _flow_1=random.choice(flowRates)
                    if _flow_1 == 0:
                        _flow_1=1
                    _flow_2=random.choice(flowRates)
                    _flow_3=random.choice(flowRates)
                    print("--")
                    print(f"New flowrates: {_flow_1}, {_flow_2}, {_flow_3}")
                    print("--")
                                        
                    _redStock.setFlowrate(_flow_1/60)
                    _blueStock.setFlowrate(_flow_2/60)
                    _pinkStock.setFlowrate(_flow_3/60)
                    
                    _jiggleFlowrate=time.time()

                _path.advanceSlugs()
                if time.time() - _nowRefresh > 1:
                    _vol=_slug.slugVolume()
                    _nowRefresh=time.time()
                    rep=f"""--------------------------------------------------\nTime: {round(time.perf_counter() - _now, 0)} sec,\nAll fr: {[_flow_1,_flow_2,_flow_3]}\nFront in: {_slug.frontHost.name},\n {round(_slug.frontHost.flowrateOut*60, 2)} mL.min-1,\n {round(_slug.frontHostPos, 2)}/{_slug.frontHost.volume} mL\nTail in: {_slug.tailHost.name},\n {round(_slug.tailHost.flowrateOut*60, 2)} mL.min-1,\n {round(_slug.tailHostPos, 2)}/{_slug.tailHost.volume} mL\nslug vol: {round(_vol, 2)} mL, vol collected: {(round(_slug.collectedVol, 2))} mL"""
                    print(rep)
                time.sleep(0.1)
            print("***************************************")
            print("Collected slug volumes")
            for _x in _path.collectedSlugs:
                print(f'Slug {_x} dispensed as {_x.totalDispensed} mL from origin and collected as {_x.collectedVol} mL')
                print(f'Slug was collected at terminus "{_x.frontHost.name}"')
            print("***************************************")
            _i+=1
            if _i > 10:
                exit()
            time.sleep(10)

    # Create a thread for running the code
    thread=threading.Thread(target=run_code)
    thread.start()

    # Wait for the thread to finish
    thread.join()
    print("We're done here")

    #######################################################################################

class StandardConfiguratedDevices:
    deviceClasses={
        "FlowsynMaxi":FlowsynMaxi,
        "VapourtecR4":VapourtecR4,
        "ReactIR702L1":ReactIR702L1,
        "UniqsisHotcoil":UniqsisHotcoil,
        "UniqsisHotchip":UniqsisHotchip,
        
        #Generalized
        "Tubing":Tubing,
        "TPiece":TPiece,
        "Coil":Coil,
        "Valve":Valve,
        "FlowOrigin":FlowOrigin,
        "FlowTerminus":FlowTerminus,
        "IR":IR,
        "Chip":Chip,
        "Pump":Pump
    }

    @staticmethod
    def initializeComponent(component,params):
        return (StandardConfiguratedDevices.deviceClasses[component](params))

Write class ParseFlowpath with method 'parse' that takes in that JSON and creates this flowpath.