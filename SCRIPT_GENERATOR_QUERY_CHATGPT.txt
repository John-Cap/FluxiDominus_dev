Here is the setup section for another example with an attached diagram:

###Examples
if __name__ == "__main__":
    _path=FlowPath()

    #Stocks + pumps up to t piece

    _redStock=FlowOrigin(dispensing=False,volume=0,inlets=[],outlets=[],name="RED_STOCK",flowrateIn=0.0,slugs=[])
    _blueStock=FlowOrigin(dispensing=False,volume=0,inlets=[],outlets=[],name="BLUE_STOCK",flowrateIn=0.0,slugs=[])
    _pinkStock=FlowOrigin(dispensing=False,volume=0,inlets=[],outlets=[],name="PINK_STOCK",flowrateIn=0.0,slugs=[])
    #Pump lines
    _pump_1=Pump(volume=1.5,inlets=[],outlets=[],name="PUMP_1",flowrateIn=0.0,slugs=[])
    _pump_2=Pump(volume=1.5,inlets=[],outlets=[],name="PUMP_2",flowrateIn=0.0,slugs=[])
    #Valves
    _cwValve=(Valve(volume=0.05,inlets=[],outlets=[],name="CW_VALVE",slugs=[]))
    #TPiece
    _Tpiece=TPiece(dispensing=False,volume=0,inlets=[],outlets=[],name="T_PIECE",flowrateIn=0.0,slugs=[])
    #Coil
    _coil=(Coil(volume=10,inlets=[],outlets=[],name="COIL",slugs=[]))
    _pump_3=Pump(volume=1.5,inlets=[],outlets=[],name="PUMP_3",flowrateIn=0.0,flowrateOut=0.0,slugs=[])
    #IR
    _IR=(IR(volume=0.5,inlets=[],outlets=[],name="IR",slugs=[]))
    #Terminus
    _waste=FlowTerminus(volume=0,inlets=[],outlets=[None],name="WASTE",flowrateIn=0,flowrateOut=0,slugs=[])
    _collect=FlowTerminus(volume=0,inlets=[],outlets=[None],name="COLLECT",flowrateIn=0,flowrateOut=0,slugs=[])

    ###################
    #Connect components

    #Stock solutions
    _redStock.flowInto(_pump_1)
    _blueStock.flowInto(_pump_2)
    #Pumplines
    _pump_1.flowInto(_Tpiece)
    _pump_2.flowInto(_Tpiece)
    #Tubing etc to WC
    _Tpiece.flowInto(_coil)
    _pinkStock.flowInto(_pump_3)
    _pump_3.flowInto(_IR)
    _coil.flowInto(_IR)
    _IR.flowInto(_cwValve)
    _cwValve.flowInto(_waste,setNameOut="WASTE")
    _cwValve.flowInto(_collect,setNameOut="COLLECT")
    #select one of the termini
    _cwValve.switchToOutlets("WASTE")
    '''
    #Create path
    '''
    _path.addPath(

        #Must be in acceptable order, otherwise a null error occurs
        #because of multiple pieces being able to flow into the same component. 
        [
            _redStock,
            _blueStock,

            _pump_1,
            _pump_2,
            
            _Tpiece,

            _coil,
            _pinkStock,
            _pump_3,
            _IR,

            _cwValve,

            _collect,
            _waste
        ]
    )
    #Selects default path
    _path.selectPath()

    for _x in _path.segments:
        print("*********")
        print(_x.name)
        print(_x.inletSets)    
        print(_x.outletSets)
        print(_x.inlets)   
        print(_x.outlets)

    #Each volume object must be manually assigned the path
    for _x in _path.segments:
        _x.associatedFlowPath=_path
    #Manually assign starting point and ending point
    _currOrigin=_Tpiece
    _currTerminus=_waste

Functions involved in the operation:

from class FlowPath:

    def updateFlowrates(self):
        for _x in self.segments:
            _x.cumulativeFlowrates()

from volumeObject:

    def cumulativeFlowrates(self):
        if self.inlets is None:
            self.inlets=[]
        if len(self.inlets)==0:
            self.flowrateOut=self.flowrateIn
        else:
            _flowrate=0
            for _x in self.inlets:
                print(f'Calculating fr for {_x}')
                if isinstance(_x,FlowOrigin):
                    _flowrate=_flowrate+_x.flowrateIn           
                elif not _x is None:
                    _flowrate=_flowrate+_x.flowrateOut
                else:    
                    continue
            self.flowrateIn=_flowrate
            self.flowrateOut=_flowrate #only one outlet for now!
            self.flowrateShifted=False
            
Due to how cumulativeFlowrates() operates, the order in which the instantiated segments are provided to .addPath() matters even though the flowsInto() method has already connected the components in the correct fashion.
One place where cumulativeFlowrates() seems to break down is when the segment being flowed into has not had its other input flows calculated yet. For example, in the diagram, segments 1-7 MUST precede 9 and 10 in the list provided to addPath() or it will err.
How can we modify updateFlowrates() and .cumulativeFlowrates() such that the order in which the list is provided to addPath() does not matter? 