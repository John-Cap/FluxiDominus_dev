Error :O -> 

Connected to broker
Published: {'deviceName': 'sf10Vapourtec1', 'inUse': True, 'settings': {'command': 'SET', 'mode': 'FLOW', 'flowrate': 1}}
Published: {'deviceName': 'flowsynmaxi2', 'inUse': True, 'settings': {'subDevice': 'PumpBFlowRate', 'command': 'SET', 'value': 0.4}}
WaitUntil started!
Traceback (most recent call last):
  File "c:\Python_Projects\FluxiDominus_dev\main.py", line 99, in <module>
    procedure.currConfig.sendMQTT()
  File "c:\Python_Projects\FluxiDominus_dev\Core\Control\Commands.py", line 192, in sendMQTT
    if _currentCommand["WaitUntil"].check():
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Python_Projects\FluxiDominus_dev\Core\Control\Commands.py", line 347, in check
    _b=self.conditionFunc(self.conditionParam())
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Python_Projects\FluxiDominus_dev\main.py", line 62, in checkTempFunc
    _b=value > targetTemp
               ^^^^^^^^^^
UnboundLocalError: cannot access local variable 'targetTemp' where it is not associated with a value

My code as it stands:

import time

import paho.mqtt.client as mqtt

from Core.Communication.Network import MQTTTemperatureUpdater
from Core.Communication.ParseFluxidominusProcedure import FdpDecoder, ScriptParser

script = '''
commandBlock_1=[
    {
        "deviceName":"sf10Vapourtec1",
        "inUse":True,
        "settings":{"command":"SET","mode":"FLOW","flowrate":1},
        "topic":"subflow/sf10vapourtec1/cmnd",
        "client":"client"
    },
    {
        "deviceName": "flowsynmaxi2",
        "inUse": True,
        "settings": {
            "subDevice": "PumpBFlowRate",
            "command": "SET",
            "value": 0.40
        },
        "topic": "subflow/flowsynmaxi2/cmnd",
        "client": "client"
    },
    {"WaitUntil": {"conditionFunc": "checkTempFunc", "conditionParam": "pullTemp", "timeout": 30, "initTimestamp": None, "completionMessage": "No message!"}}
];
commandBlock_2=[
    {"Delay": {"sleepTime": 15, "initTimestamp": None}},
    {
        "deviceName": "flowsynmaxi2",
        "inUse": True,
        "settings": {
            "subDevice": "PumpBFlowRate",
            "command": "SET",
            "value": 0
        },
        "topic": "subflow/flowsynmaxi2/cmnd",
        "client": "client"
    },
    {
        "deviceName":"sf10Vapourtec1",
        "inUse":True,
        "settings":{"command":"SET","mode":"FLOW","flowrate":0},
        "topic":"subflow/sf10vapourtec1/cmnd",
        "client":"client"
    }
];
'''

updater = MQTTTemperatureUpdater()
thread = updater.start()
temps=[30,40,50,60,70,80]
targetIndex=0
maxIndex=5
targetTemp=temps[targetIndex]

def checkTempFunc(value):
    _b=value > targetTemp
    if _b:
        targetIndex+=1
        if targetIndex > maxIndex:
            print("Max temp reached!")
            return True
        targetTemp=temps[targetIndex]
    return _b

def pullTemp():
    return updater.getTemp()

# Set up MQTT client
client = mqtt.Client()
client.connect("localhost", 1883, 60)
# Create script parser and decoder
script_parser = ScriptParser(script, client)
decoder_kwargs = {
    "conditionFunc": checkTempFunc,
    "conditionParam": pullTemp
}

fdpDecoder = FdpDecoder(currKwargs=decoder_kwargs)
parser = ScriptParser(script, client)
procedure = parser.createProcedure(fdpDecoder)

doIt=True
while doIt:
    if (len(procedure.currConfig.commands))==0:
        procedure.next()
        if procedure.currConfig is None:
            print("Procedure complete")
            doIt=False
        else:
            print("Next procedure!")
    else:
        #Send a command
        procedure.currConfig.sendMQTT()
    time.sleep(0.1)
