
  List<Widget> _buildCategoryChips(BuildContext context, Offset position) {
    return componentConfig.entries.map((entry) {
      final categoryName = entry.key;
      final components = entry.value;

      return ActionChip(
        label: Text(categoryName),
        onPressed: () {
          StarMenuOverlay.displayStarMenu(
            context,
            StarMenu(
              controller: widget.innerMenuController,
              params: StarMenuParameters(
                shape: MenuShape.linear,
                openDurationMs: 60,
                linearShapeParams: const LinearShapeParams(
                  angle: 270,
                  alignment: LinearAlignment.left,
                  space: 10,
                ),
                centerOffset: position -
                    Offset(
                      widget.dashboard.dashboardSize.width / 2,
                      widget.dashboard.dashboardSize.height / 2,
                    ),
              ),
              onItemTapped: (index, controller) {
                widget.innerMenuController.closeMenu!();
                widget.outerMenuController.closeMenu!();
                widget.innerMenuController = StarMenuController();
                widget.outerMenuController = StarMenuController();
              },
              parentContext: context,
              items: components.map((comp) {
                return ActionChip(
                  label: Text(comp.label),
                  onPressed: () {
                    widget.dashboard.addElement(comp.build(position));
                    _updateConnections();
                  },
                );
              }).toList(),
            ),
          );
        },
      );
    }).toList();
  }
  
class ConnectionMqttReport {
  Map<String, Map<String, dynamic>> report = {};
  String toJsonString() {
    Map<String, dynamic> pub = {
      "reqUI": {
        "FlowSketcher": {"parseFlowsketch": report}
      }
    };
    return jsonEncode(pub);
  }
}

//Component config
class ComponentConfig {
  final String label;
  final Component Function(Offset position) build;

  ComponentConfig({required this.label, required this.build});
}

final Map<String, List<ComponentConfig>> componentConfig = {
  "R4": [
    ComponentConfig(
      label: "R4 (HPLC) Pump A",
      build: (pos) => Component(
        position: pos,
        text: 'R4 (HPLC) A',
        size: const Size(100, 50),
        deviceName: 'vapourtecR4P1700',
        handlerSize: 15,
        kind: ElementKind.rectangle,
        handlers: [Handler.leftCenter, Handler.rightCenter],
        deviceType: 'Pump',
        volume: 5,
        associatedCmndSource: {"flowrate": "pafr"},
      ),
    ),
    ComponentConfig(
      label: "R4 (HPLC) Pump B",
      build: (pos) => Component(
        position: pos,
        text: 'R4 (HPLC) B',
        size: const Size(100, 50),
        deviceName: 'vapourtecR4P1700',
        handlerSize: 15,
        kind: ElementKind.rectangle,
        handlers: [Handler.leftCenter, Handler.rightCenter],
        deviceType: 'Pump',
        volume: 5,
        associatedCmndSource: {"flowrate": "pbfr"},
      ),
    ),
    ComponentConfig(
      label: "R4 3-way Valve (S/R A)",
      build: (pos) => Component(
        position: pos,
        deviceName: "null",
        volume: 0.25,
        size: const Size(100, 50),
        text: 'R4 S/R Valve A',
        handlerSize: 15,
        kind: ElementKind.rectangle,
        handlers: [Handler.leftCenter, Handler.rightCenter],
        deviceType: 'Valve',
        associatedCmndSource: {'valveState': 'svasr'},
      ),
    ),
    ComponentConfig(
      label: "R4 3-way Valve (S/R B)",
      build: (pos) => Component(
        position: pos,
        deviceName: "null",
        volume: 0.25,
        size: const Size(100, 50),
        text: 'R4 S/R Valve B',
        handlerSize: 15,
        kind: ElementKind.rectangle,
        handlers: [Handler.leftCenter, Handler.rightCenter],
        deviceType: 'Valve',
        associatedCmndSource: {'valveState': 'svbsr'},
      ),
    ),
    ComponentConfig(
      label: "R4 Inject A",
      build: (pos) => Component(
        position: pos,
        text: 'R4 Inject A',
        size: const Size(100, 50),
        deviceName: 'null',
        handlerSize: 15,
        kind: ElementKind.rectangle,
        handlers: [Handler.leftCenter, Handler.rightCenter],
        deviceType: 'Injector',
        volume: 0.25,
        associatedCmndSource: {},
      ),
    ),
    ComponentConfig(
      label: "R4 Inject B",
      build: (pos) => Component(
        position: pos,
        text: 'R4 Inject B',
        size: const Size(100, 50),
        deviceName: 'null',
        handlerSize: 15,
        kind: ElementKind.rectangle,
        handlers: [Handler.leftCenter, Handler.rightCenter],
        deviceType: 'Injector',
        volume: 0.25,
        associatedCmndSource: {},
      ),
    ),
  ],
  "Flowsyn Maxi": [
    ComponentConfig(
      label: "Flowsyn Maxi Pump A",
      build: (pos) => Component(
        position: pos,
        text: 'Maxi Pump A',
        size: const Size(100, 50),
        deviceName: 'flowsynmaxi2',
        handlerSize: 15,
        kind: ElementKind.rectangle,
        handlers: [Handler.leftCenter, Handler.rightCenter],
        deviceType: 'FlowsynMaxi',
        volume: 5,
        associatedCmndSource: {"flowrate": "pafr"},
      ),
    ),
    ComponentConfig(
      label: "Flowsyn Maxi Pump B",
      build: (pos) => Component(
        position: pos,
        text: 'Maxi Pump B',
        size: const Size(100, 50),
        deviceName: 'flowsynmaxi1',
        handlerSize: 15,
        kind: ElementKind.rectangle,
        handlers: [Handler.leftCenter, Handler.rightCenter],
        deviceType: 'FlowsynMaxi',
        volume: 5,
        associatedCmndSource: {"flowrate": "pbfr"},
      ),
    ),
    ComponentConfig(
      label: "3-way Valve (S/R A)",
      build: (pos) => Component(
        position: pos,
        deviceName: "null",
        volume: 0.25,
        size: const Size(100, 50),
        text: 'R4 S/R Valve A',
        handlerSize: 15,
        kind: ElementKind.rectangle,
        handlers: [Handler.leftCenter, Handler.rightCenter],
        deviceType: 'Valve',
        associatedCmndSource: {'valveState': 'svasr'},
      ),
    ),
    ComponentConfig(
      label: "3-way Valve (S/R B)",
      build: (pos) => Component(
        position: pos,
        deviceName: "null",
        volume: 0.25,
        size: const Size(100, 50),
        text: 'R4 S/R Valve B',
        handlerSize: 15,
        kind: ElementKind.rectangle,
        handlers: [Handler.leftCenter, Handler.rightCenter],
        deviceType: 'Valve',
        associatedCmndSource: {'valveState': 'svbsr'},
      ),
    ),
    ComponentConfig(
      label: "Flowsyn Inject A",
      build: (pos) => Component(
        position: pos,
        text: 'Flowsyn Inject A',
        size: const Size(100, 50),
        deviceName: 'null',
        handlerSize: 15,
        kind: ElementKind.rectangle,
        handlers: [Handler.leftCenter, Handler.rightCenter],
        deviceType: 'Injector',
        volume: 0.25,
        associatedCmndSource: {},
      ),
    ),
    ComponentConfig(
      label: "Flowsyn Inject B",
      build: (pos) => Component(
        position: pos,
        text: 'Flowsyn Inject B',
        size: const Size(100, 50),
        deviceName: 'null',
        handlerSize: 15,
        kind: ElementKind.rectangle,
        handlers: [Handler.leftCenter, Handler.rightCenter],
        deviceType: 'Injector',
        volume: 0.25,
        associatedCmndSource: {},
      ),
    ),
  ],
  "Columns": [
    ComponentConfig(
      label: "Column (2 mL)",
      build: (pos) => Component(
        position: pos,
        text: 'Column (2 mL)',
        textSize: 15,
        size: const Size(100, 50),
        deviceName: "null",
        handlerSize: 15,
        kind: ElementKind.rectangle,
        handlers: [Handler.leftCenter, Handler.rightCenter],
        deviceType: 'Column',
        volume: 2,
        associatedCmndSource: {},
      ),
    ),
    ComponentConfig(
      label: "Column (5 mL)",
      build: (pos) => Component(
        position: pos,
        text: 'Column (5 mL)',
        textSize: 15,
        size: const Size(100, 50),
        deviceName: "null",
        handlerSize: 15,
        kind: ElementKind.rectangle,
        handlers: [Handler.leftCenter, Handler.rightCenter],
        deviceType: 'Column',
        volume: 5,
        associatedCmndSource: {},
      ),
    ),
    ComponentConfig(
      label: "Column (10 mL)",
      build: (pos) => Component(
        position: pos,
        text: 'Column (10 mL)',
        textSize: 15,
        size: const Size(100, 50),
        deviceName: "null",
        handlerSize: 15,
        kind: ElementKind.rectangle,
        handlers: [Handler.leftCenter, Handler.rightCenter],
        deviceType: 'Column',
        volume: 10,
        associatedCmndSource: {},
      ),
    ),
  ],
  "Analytical": [
    ComponentConfig(
      label: "Magritek 60",
      build: (pos) => Component(
        position: pos,
        text: 'Magritek 60',
        size: const Size(100, 50),
        deviceName: 'reactIR702L1', // TODO: fix if needed
        handlerSize: 15,
        kind: ElementKind.rectangle,
        handlers: [Handler.leftCenter, Handler.rightCenter],
        deviceType: 'NMR',
        volume: 0.25,
        associatedCmndSource: {},
      ),
    ),
    ComponentConfig(
      label: "ReactIR 702L1",
      build: (pos) => Component(
        position: pos,
        text: 'ReactIR 702L1',
        size: const Size(100, 50),
        deviceName: 'reactIR702L1',
        handlerSize: 15,
        kind: ElementKind.rectangle,
        handlers: [Handler.leftCenter, Handler.rightCenter],
        deviceType: 'IR',
        volume: 0.25,
        associatedCmndSource: {},
      ),
    ),
  ],
  "BPRs": List.generate(4, (i) {
    final bar = [2, 5, 8, 10][i];
    return ComponentConfig(
      label: "BPR ($bar Bar)",
      build: (pos) => Component(
        position: pos,
        text: "BPR ($bar Bar)",
        size: const Size(100, 50),
        deviceName: "null",
        handlerSize: 15,
        kind: ElementKind.rectangle,
        handlers: [Handler.leftCenter, Handler.rightCenter],
        deviceType: 'BPR',
        volume: 0.1,
        associatedCmndSource: {},
      ),
    );
  }),
  "Stocks": [
    ComponentConfig(
      label: "Stock Solution",
      build: (pos) => Component(
        position: pos,
        text: 'Stock',
        size: const Size(100, 50),
        handlerSize: 15,
        kind: ElementKind.rectangle,
        handlers: [Handler.rightCenter],
        deviceName: 'null',
        deviceType: 'FlowOrigin',
        volume: 0,
        associatedCmndSource: {},
      ),
    ),
    ComponentConfig(
      label: "Pushing Solvent",
      build: (pos) => Component(
        position: pos,
        text: 'Push',
        size: const Size(100, 50),
        handlerSize: 15,
        kind: ElementKind.rectangle,
        handlers: [Handler.rightCenter],
        deviceName: 'null',
        deviceType: 'FlowOrigin',
        volume: 0,
        associatedCmndSource: {},
      ),
    ),
  ],
  "Standalone Pumps": [
    ComponentConfig(
      label: "Vapourtec SF10",
      build: (pos) => Component(
        position: pos,
        text: 'SF10',
        size: const Size(100, 50),
        deviceName: 'sf10vapourtec1',
        handlerSize: 15,
        kind: ElementKind.rectangle,
        handlers: [Handler.leftCenter, Handler.rightCenter],
        deviceType: 'Pump',
        volume: 5,
        associatedCmndSource: {},
      ),
    ),
  ],
  "Hotcoils": [
    for (var mL in [10, 20, 40])
      ComponentConfig(
        label: "Hotcoil ($mL mL)",
        build: (pos) => Component(
          position: pos,
          text: "Hotcoil ($mL mL)",
          size: const Size(100, 50),
          deviceName: "hotcoil1",
          handlerSize: 15,
          kind: ElementKind.rectangle,
          handlers: [Handler.leftCenter, Handler.rightCenter],
          deviceType: 'Coil',
          volume: mL.toDouble(),
          associatedCmndSource: {},
        ),
      ),
  ],
  "Connectors": [
    ComponentConfig(
      label: "T-Piece",
      build: (pos) => Component(
        position: pos,
        text: 'T-Piece',
        size: const Size(100, 50),
        deviceName: "null",
        handlerSize: 15,
        kind: ElementKind.rectangle,
        handlers: [
          Handler.leftCenter,
          Handler.rightCenter,
          Handler.bottomCenter,
        ],
        deviceType: 'TPiece',
        volume: 0.05,
        associatedCmndSource: {},
      ),
    ),
  ],
  "Collection Points": [
    ComponentConfig(
      label: "Waste",
      build: (pos) => Component(
        position: pos,
        text: 'Waste',
        size: const Size(100, 50),
        deviceName: 'null',
        handlerSize: 15,
        kind: ElementKind.rectangle,
        handlers: [Handler.leftCenter],
        deviceType: 'FlowTerminus',
        volume: 0,
        associatedCmndSource: {},
      ),
    ),
    ComponentConfig(
      label: "Product",
      build: (pos) => Component(
        position: pos,
        text: 'Product',
        size: const Size(100, 50),
        deviceName: 'null',
        handlerSize: 15,
        kind: ElementKind.rectangle,
        handlers: [Handler.leftCenter],
        deviceType: 'FlowTerminus',
        volume: 0,
        associatedCmndSource: {},
      ),
    ),
  ],
};


  StarMenuController outerMenuController = StarMenuController();
  StarMenuController innerMenuController = StarMenuController();
        parentContext: context,
        controller: widget.outerMenuController,
        items: [
          Wrap(
            children: _buildCategoryChips(context,
                position)