[
    ElementMenuItem(
      builder: (context, element) => Text(
        element.text,
        style: const TextStyle(fontWeight: FontWeight.bold),
      ),
      keepMenuOpen: true,
    ),
    ElementMenuItem(
      builder: (context, element) => InkWell(
        onTap: () {
          final state = context.findAncestorStateOfType<FlowSketcherState>();
          state?.widget.dashboard.removeElement(element);
          state?._updateConnections();
        },
        child: const Text('Delete Pump'),
      ),
    ),
    ElementMenuItem(
      builder: (context, element) => InkWell(
        onTap: () async {
          final state = context.findAncestorStateOfType<FlowSketcherState>();
          double? newVal = await SketcherInputDialog.getDouble(
              context: context, title: 'New Flowrate');
          if (element is Component) {
            String cmd = element.associatedCmndSource['flowrate'] ?? "";
            if (cmd == "") {
            } else {
              // String? newCmnd = jsonEncode(HardcodedCommands()
              //     .injectVal(element.deviceName, cmd, newVal));
              String? newCmnd = HardcodedCommands()
                      .injectVal(element.deviceName, cmd, newVal) ??
                  "";
              if (newCmnd == "") {}
              {
                state?.widget.mqttService.publish(
                    MqttTopics.getCmndTopic(element.deviceName), newCmnd);
              }
            }
          }
        },
        child: const Text('Set flowrate'),
      ),
    ),
    ElementMenuItem(
      builder: (context, element) => Text(
        element.text,
        style: const TextStyle(fontWeight: FontWeight.w900),
      ),
      keepMenuOpen: true,
    ),
    ElementMenuItem(
      builder: (context, element) => TextMenu(element: element),
      keepMenuOpen: true,
    ),
    ElementMenuItem(
      builder: (context, element) => InkWell(
        onTap: () {
          final state = context.findAncestorStateOfType<FlowSketcherState>();
          state?.widget.dashboard.removeElementConnections(element);
          state?._updateConnections();
        },
        child: const Text('Remove all connections'),
      ),
    ),
    ElementMenuItem(
      builder: (context, element) => InkWell(
        onTap: () {
          final state = context.findAncestorStateOfType<FlowSketcherState>();
          state?.widget.dashboard.setElementResizable(element, true);
        },
        child: const Text('Resize'),
      ),
    ),
    ElementMenuItem(
      builder: (context, element) => ElementSettingsMenu(element: element),
      keepMenuOpen: true,
    ),
  ],