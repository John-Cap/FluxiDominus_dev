
    def advanceSlugs(self):
        _nowTime=time.perf_counter()
        _dT=_nowTime-self.timePrev        
        self.timePrev=_nowTime

        #Front
        for slug in self.slugs:
            
            #Now for the fireworks
            _frontHost=slug.frontHost
            if isinstance(_frontHost,FlowTerminus):
                if slug.reachedTerminusAt==0:
                    slug.reachedTerminusAt=time.perf_counter() #TODO - Wait what exactly does this tell us?
                continue
            if _frontHost is None:
                continue

            _frontHostPos=slug.frontHostPos
         
            _dV=_frontHost.flowrateOut*_dT
            _newVol=_frontHostPos+_dV

            if _newVol>_frontHost.volume:
                _nextHost=_frontHost.outlets[0]          
                if isinstance(_nextHost,FlowTerminus):
                    slug.frontHost=_nextHost
                    slug.frontHostPos=0
                    slug.collecting=True
                else:
                    #TODO   
                    _remainder=_newVol-_frontHost.volume
                    print("Next host fr: " + str(_nextHost.flowrateOut))
                    if _nextHost.flowrateOut!=_frontHost.flowrateOut:
                        _currHostLeftToFill=(_frontHost.volume-_frontHostPos)
                        _frontHostFillTime=_currHostLeftToFill/(_frontHost.flowrateOut)
                        _dTRemainder=_dT-_frontHostFillTime
                        #print("dTremainder: " + str(_dTRemainder) + ", next host fr: " + str((_nextHost.flowrateOut)))
                        _volumeAdd=_dTRemainder*(_nextHost.flowrateOut)
                        slug.frontHost=_nextHost
                        slug.frontHostPos=_volumeAdd
                        #print("_dV: " + str(_dV) + " _dT: " + str(_dT) + " _dtRemainder: " + str(_dTRemainder) + " _currHostLeftToFill: " + str(_currHostLeftToFill) + " _volumeAdd: " + str(_volumeAdd))
                    else:
                        slug.frontHost=_nextHost
                        slug.frontHostPos=_remainder                   
            else:
                slug.frontHostPos=_newVol
        #Tail
        for slug in self.slugs:
            _tailHost=slug.tailHost

            if isinstance(_tailHost,FlowTerminus):
                if slug.collected==False:
                    slug.collected=True
                continue
            elif _tailHost.dispensing:
                slug.lastDispenseCycleTime=time.perf_counter()
                continue
                
            _tailHostPos=slug.tailHostPos
         
            _dV=_tailHost.flowrateOut*_dT

            if isinstance(slug.frontHost,FlowTerminus):
                slug.collectedVol=slug.collectedVol+_dV

            _newVol=_tailHostPos+_dV

            if _newVol>_tailHost.volume:
                _nextHost=_tailHost.outlets[0]        
                if isinstance(_nextHost,FlowTerminus):
                    slug.tailHost=_nextHost
                    slug.tailHostPos=0
                    self.collectedSlugs.append(slug)
                    del self.slugs[self.slugs.index(slug)]
                else:
                    #TODO - if next host is small enough to be jumped in 1 cycle, something might go wrong!
                    _remainder=_newVol-_tailHost.volume

                    if _nextHost.flowrateOut!=_tailHost.flowrateOut:
                        _currHostLeftToFill=(_tailHost.volume-_tailHostPos)
                        _tailHostFillTime=_currHostLeftToFill/(_tailHost.flowrateOut)
                        _dTRemainder=_dT-_tailHostFillTime
                        _volumeAdd=_dTRemainder*(_nextHost.flowrateOut)
                        slug.tailHost=_nextHost
                        slug.tailHostPos=_volumeAdd
                        #print("_dV: " + str(_dV) + " _dT: " + str(_dT) + " _dtRemainder: " + str(_dTRemainder) + " _currHostLeftToFill: " + str(_currHostLeftToFill) + " _volumeAdd: " + str(_volumeAdd))
                    else:
                        slug.tailHost=_nextHost
                        slug.tailHostPos=_remainder                   
            else:
                slug.tailHostPos=_newVol
