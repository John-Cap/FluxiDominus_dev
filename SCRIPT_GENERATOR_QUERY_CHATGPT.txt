Okay, getting there. Blocks are correctly added and published. However, as pointed out, devices each have certain settings available. Look:

devicesAndTheirSettings = {
    "sf10vapourtec1": ["fr"],
    "sf10vapourtec2": ["fr"],
    "hotcoil1": ["temp"],
    "hotcoil2": ["temp"],
    "hotchip1": ["temp"],
    "hotchip2": ["temp"],
    "flowsynmaxi1": ["pafr", "pbfr", "sva", "svb", "svcw"],
    "flowsynmaxi2": ["pafr", "pbfr", "sva", "svb", "svcw"]
}

so another dropdown is neccessary after selecting a device so the user can select one of the available settings for the device before submitting a value.

Code as it stands:

import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:flutter_flow_chart/includes/plutter_scratch.dart';

class ScriptGeneratorWidget extends StatefulWidget {
  @override
  _ScriptGeneratorWidgetState createState() => _ScriptGeneratorWidgetState();
}

class _ScriptGeneratorWidgetState extends State<ScriptGeneratorWidget> {
  final List<String> _devices = [
    'flowsynmaxi1',
    'flowsynmaxi2',
    'sf10vapourtec1',
    'sf10vapourtec2',
    'hotchip1',
    'hotchip2',
    'hotcoil1',
    'hotcoil2',
    'Delay',
    'WaitUntil'
  ];

  final MqttService _mqttService = MqttService();

  String _selectedDevice = '';
  String _blockName = '';
  final Map<String, List<Map<String, dynamic>>> _blocks = {};

  final TextEditingController _valueController = TextEditingController();
  final TextEditingController _blockNameController = TextEditingController();

  @override
  void initState() {
    super.initState();
    _mqttService.initializeMQTTClient();
    _mqttService.connect();
  }

  void _addCommand() {
    final String setting = _selectedDevice;
    final String value = _valueController.text;

    if (_blockName.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Please enter a block name')),
      );
      return;
    }

    if (_selectedDevice.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Please select a device')),
      );
      return;
    }

    if (value.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Please enter a value')),
      );
      return;
    }

    final dynamic parsedValue = _parseValue(value);
    final command = {'setting': setting, 'value': parsedValue};

    setState(() {
      if (_blocks[_blockName] == null) {
        _blocks[_blockName] = [];
      }
      _blocks[_blockName]!.add(command);
    });

    _valueController.clear();
  }

  void _saveBlocks() {
    final String jsonPayload = jsonEncode(_blocks);
    _mqttService.publish('chemistry/command', jsonPayload);

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Blocks saved and published to MQTT')),
    );
  }

  dynamic _parseValue(String value) {
    if (value.toLowerCase() == 'true' || value.toLowerCase() == 'false') {
      return value.toLowerCase() == 'true';
    } else if (double.tryParse(value) != null) {
      return double.parse(value);
    }
    return value;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('FlowChem Script Generator')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            TextField(
              controller: _blockNameController,
              decoration: InputDecoration(labelText: 'Block Name'),
              onChanged: (value) {
                setState(() {
                  _blockName = value;
                });
              },
            ),
            DropdownButton<String>(
              hint: Text('Select Device'),
              value: _selectedDevice.isEmpty ? null : _selectedDevice,
              items: _devices.map((String device) {
                return DropdownMenuItem<String>(
                  value: device,
                  child: Text(device),
                );
              }).toList(),
              onChanged: (String? newValue) {
                setState(() {
                  _selectedDevice = newValue ?? '';
                });
              },
            ),
            TextField(
              controller: _valueController,
              decoration: InputDecoration(labelText: 'Value'),
            ),
            ElevatedButton(
              onPressed: _addCommand,
              child: Text('Submit Command'),
            ),
            Expanded(
              child: ListView.builder(
                itemCount: _blocks.length,
                itemBuilder: (context, index) {
                  final blockName = _blocks.keys.elementAt(index);
                  final commands = _blocks[blockName]!;

                  return Card(
                    margin: EdgeInsets.symmetric(vertical: 8.0),
                    child: ListTile(
                      title: Text('Block: $blockName'),
                      subtitle: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: commands.map((command) {
                          return Text(
                              '${command['setting']}: ${command['value']}');
                        }).toList(),
                      ),
                    ),
                  );
                },
              ),
            ),
            ElevatedButton(
              onPressed: _saveBlocks,
              child: Text('Save and Publish'),
            ),
          ],
        ),
      ),
    );
  }
}

void main() {
  runApp(MaterialApp(
    home: ScriptGeneratorWidget(),
  ));
}
