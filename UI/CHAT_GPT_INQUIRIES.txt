
Kinda works but recommendation script cannot be parsed. Remember, generateRecommendation_TEMP must output shape of standard self.currentRecommendation:

(From old function)
            
    def generateRecommendation(self):
        """ Generates recommendations using the optimizer. """
        if self.optimizer is None:
            print("Warning: No optimizer set. Cannot generate recommendations.")
            return

        recommendedValues = self.optimizer.recommend(self.reactionParametres.getAllTweakables())

        if not recommendedValues:
            print("Warning: Optimizer returned empty recommendations.")
            return

        self.currentRecommendation = {}

        for param, value in recommendedValues.items():
            for device, params in self.availableParams.items():
                if param in params:
                    if device not in self.currentRecommendation:
                        self.currentRecommendation[device] = {}
                    self.currentRecommendation[device][param.id] = value

        self.recommendationHistory.append(self.currentRecommendation)

        print(f"CURRENT self.currentRecommendation: {self.currentRecommendation}")
        print("\nGenerated Recommendation:")
        for device, params in self.currentRecommendation.items():
            print(f"  Device: {device}")
            for paramId, val in params.items():
                print(f"    {paramId}: {val:.3f}")

gives something like:
CURRENT self.currentRecommendation: {'hotcoil1': {UUID('1b4d72a9-a704-4120-a7b6-233e16cbefbc'): 83.84280054373028}, 'vapourtecR4P1700': {UUID('53ccac15-bb79-4c63-908a-fd56e9697acc'): 1.8318375184184492}}

which is executed by existing function:
                        
    def executeRecommendation(self):
        """ Converts recommendation into commands, resets automation, and sends the script to MQTT. """
        # First, clear current automation
        self.automation.reset()

        for device, params in self.currentRecommendation.items():
            for paramId, value in params.items():
                # Find the parameter by ID
                for param in self.reactionParametres.getAllTweakables():
                    if param.id == paramId:
                        command = param.associatedCommand
                        self.automation.addBlockElement(param.name, device, command, value)
                        break

        # Convert to script and send to MQTT
        self.automation.parseToScript()
        self.mqttService.script = self.automation.output
        print(f"Automization output: {self.automation.output}")
